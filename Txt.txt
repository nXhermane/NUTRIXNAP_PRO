

import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    Dimensions,
    KeyboardAvoidingView,
    KeyboardEvent,
    TextInput,
    UIManager,
    findNodeHandle,
    Platform
} from "react-native";
import React, {
    useEffect,
    useState,
    useMemo,
    useCallback,
    useRef,
    PropsWithChildren
} from "react";
import KeyboardAwareScrollViewContainer from "./KeyboardAwareScrollViewContainer";
interface Props {}

const KeyboardAwareScrollView = (props: PropsWithChildren<Props>) => {
    const { children, style } = props;
    const scrollView = useRef(null);
    const scrollViewTarget = useRef(null);
    const scrollViewContainerInitialState = useRef(null);
    const firstRender = useRef(false);
    // const [scrollViewHeight, setScrollViewHeight] = useState({ h: 0, p: 0 });
    const [keyboardSpace, setkeyboardSpace] = useState<number>(0);

    function updateKeyboadSpace(e: KeyboardEvent) {}

    function onKeyboardDidShow(e) {
        updateKeyboadSpace(e);
        setkeyboardSpace(500);
    }
    function onKeyboardDidHide(e) {
        setkeyboardSpace(0);
    }
    return (
        <KeyboardAwareScrollViewContainer
            ref={scrollView}
            onKeyboardDidShow={e => onKeyboardDidShow(e)}
            onKeyboardDidHide={onKeyboardDidHide}
            onLayout={e => {
                e.persist();
                scrollViewTarget.current = e.nativeEvent.target;
            }}
            onLayoutContainer={e => {
                e.persist();
                if (!firstRender.current) {
                    scrollViewContainerInitialState.current =
                        e.nativeEvent.layout.height;
                    firstRender.current = true;
                }
            }}
            style={{
              paddingBottom:keyboardSpace
            }}
            containerStyle={{
                maxHeight: keyboardSpace != 0 ? keyboardSpace : "100%",
                
            }}
        >
            <View
                style={{
                    width: "100%"
                    // paddingBottom:500
                }}
            >
                {typeof children === "function" ? children() : children}
            </View>
        </KeyboardAwareScrollViewContainer>
    );
};

export default React.memo(KeyboardAwareScrollView);

const styles = StyleSheet.create({});


import {
    StyleSheet,
    View,
    ScrollView,
    ViewStyle,
    LayoutEvent,
    Keyboard,
    KeyboardAvoidingView,
    KeyboardEvent
} from "react-native";
import React from "react";

interface Props {
    onLayout: (e: LayoutEvent) => void;
    scrollable?: boolean;
    style?: ViewStyle;
    onKeyboardDidShow?: (e: KeyboardEvent) => void;
    onKeyboardDidHide?: (e: KeyboardEvent) => void;
}

const KeyboardAwareScrollViewContainer = React.forwardRef(
    (props: React.PropsWithChildren<Props>, ref) => {
        const {
            children,
            style = {},
            onLayout,
            onLayoutContainer,
            onKeyboardDidShow,
            onKeyboardDidHide,
            containerStyle = {}
        } = props;

        React.useEffect(() => {
            const showsListener = Keyboard.addListener(
                "keyboardDidShow",
                (e: KeyboardEvent) => {
                    onKeyboardDidShow && onKeyboardDidShow(e);
                }
            );
            const hideListener = Keyboard.addListener(
                "keyboardDidHide",
                (e: KeyboardEvent) => {
                    onKeyboardDidHide && onKeyboardDidHide(e);
                }
            );
            return () => {
                showsListener.remove();
                hideListener.remove();
            };
        }, [onKeyboardDidHide, onKeyboardDidShow]);

        return (
            <View
                style={containerStyle}
                onLayout={onLayoutContainer && onLayoutContainer}
            >
                <ScrollView
                    ref={ref && ref}
                    contentContainerStyle={[styles.container, style]}
                    {...props}
                    keyboardShouldPersistTaps={"handled"}
                    keyboardDismissMode={"none"}
                    removeClippedSubviews
                    scrollEventThrottle={1}
                    onLayout={onLayout && onLayout}
                >
                    {children}
                </ScrollView>
            </View>
        );
    }
);

export default React.memo(KeyboardAwareScrollViewContainer);

const styles = StyleSheet.create({
    container: {}
});
